#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"

Texture2D SceneColorTexture;
Texture2D WorldNormalTexture;
SamplerState WorldNormalTextureSampler;

static const float2 SobelSamplePoints[9] = {
	float2(-1, 1), float2(0, 1), float2(1, 1),
	float2(-1, 0), float2(0, 0), float2(1, 0),
	float2(-1, -1), float2(0, -1), float2(1, -1),
};

static const float SobelXMatrix[9] = {
	1, 0, -1,
	2, 0, -2,
	1, 0, -1
};

static const float SobelYMatrix[9] = {
	1, 2, 1,
	0, 0, 0,
	-1, -2, -1
};

float SobelFilter(Texture2D textureInput, SamplerState samplerState, float2 uv, float2 texelSize)
{
	float2 sobelR = 0;
	float2 sobelG = 0;
	float2 sobelB = 0;
	float2 sobelA = 0;

	[unroll] for (int i = 0; i < 9; i++) {
		float4 value = textureInput.Sample(samplerState, uv + SobelSamplePoints[i] * texelSize);
		float2 kernel = float2(SobelXMatrix[i], SobelYMatrix[i]);
		
		sobelR += value.r * kernel;
		sobelG += value.g * kernel;
		sobelB += value.b * kernel;
		sobelA += value.a * kernel;
	}
	
	return max(max(length(sobelR), max(length(sobelG), length(sobelB))), length(sobelA));
}

float4 MainPS(float4 SvPosition : SV_POSITION) : SV_Target0
{
	const float2 UV = SvPosition.xy * View.BufferSizeAndInvSize.zw;
	const float2 texelSize = View.BufferSizeAndInvSize.zw;
	
	float edge = SobelFilter(WorldNormalTexture, WorldNormalTextureSampler, UV, texelSize);
	float4 sceneColor = SceneColorTexture.Load(int3(SvPosition.xy, 0));
	
	return float4(edge, edge, edge, 1);
}