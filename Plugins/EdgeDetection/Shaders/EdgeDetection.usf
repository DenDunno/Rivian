#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"
#include "NormalsEncoding.usf"

float EdgeSize;
float Threshold;
float Feather;
int ShowEdgesOnly;
float4 EdgeColor;
Texture2D SceneColorTexture;
Texture2D CompressedGBuffer;
SamplerState CompressedGBufferSampler;

static const float2 SobelSamplePoints[9] = {
	float2(-1, 1), float2(0, 1), float2(1, 1),
	float2(-1, 0), float2(0, 0), float2(1, 0),
	float2(-1, -1), float2(0, -1), float2(1, -1),
};

static const float SobelXMatrix[9] = {
	1, 0, -1,
	2, 0, -2,
	1, 0, -1
};

static const float SobelYMatrix[9] = {
	1, 2, 1,
	0, 0, 0,
	-1, -2, -1
};

float SobelFilter(Texture2D textureInput, SamplerState samplerState, float2 uv, float2 texelSize)
{
	float2 worldNormalR = 0;
	float2 worldNormalG = 0;
	float2 worldNormalB = 0;
	float2 luminance = 0;
	float2 depth = 0;

	[unroll] for (int i = 0; i < 9; i++) {
		float4 value = textureInput.Sample(samplerState, uv + SobelSamplePoints[i] * texelSize);
		float3 worldNormal = DecodeNormalOctahedron(value.rg);
		float sceneLuminance = value.b;
		float sceneDepth = value.a;
		
		float2 kernel = float2(SobelXMatrix[i], SobelYMatrix[i]);
		worldNormalR += worldNormal.r * kernel;
		worldNormalG += worldNormal.g * kernel;
		worldNormalB += worldNormal.b * kernel;
		luminance += sceneLuminance * kernel;
		depth += sceneDepth * kernel;
	}
	
	return max(max(max(length(worldNormalR), max(length(worldNormalG), length(worldNormalB))), length(depth)), length(luminance));
}

float4 ComputeEdge(float2 svPosition) {
	const float2 uv = svPosition * View.BufferSizeAndInvSize.zw;
	const float2 texelSize = View.BufferSizeAndInvSize.zw * EdgeSize;
	
	float edge = SobelFilter(CompressedGBuffer, CompressedGBufferSampler, uv, texelSize);
	return smoothstep(Threshold - Feather, Threshold, edge) * EdgeColor;
}

float4 AlphaBlend(float4 dst, float4 src) {
	return src + dst * (1.0 - src.a);
}

float4 MainPS(float4 SvPosition : SV_POSITION) : SV_Target0
{
	float4 sceneColor = SceneColorTexture.Load(int3(SvPosition.xy, 0));
	float4 edgeColor = ComputeEdge(SvPosition);
	
	return ShowEdgesOnly ? edgeColor : AlphaBlend(sceneColor, edgeColor);
}